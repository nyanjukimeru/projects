import numpy as np
import pandas as pd
from scipy.linalg import svd

# Load the georeferenced and non-georeferenced datasets
georeferenced_data = pd.read_csv('E:\PROJECT\DATA SETS\Drone Images\Cameras.csv')
non_georeferenced_data = pd.read_csv('E:\PROJECT\DATA SETS\Drone Images\Raw Cameras.csv')

# Merge the datasets based on the 'photoID' column
merged_data = pd.merge(georeferenced_data, non_georeferenced_data, on='photoID', suffixes=('_georeferenced', '_non_georeferenced'))

# Extract coordinates as NumPy arrays
georeferenced_coords = merged_data[['X_georeferenced', 'Y_georeferenced', 'Z_georeferenced']].to_numpy()
non_georeferenced_coords = merged_data[['X_non_georeferenced', 'Y_non_georeferenced', 'Z_non_georeferenced']].to_numpy()

# Calculate centroids
centroid_georeferenced = np.mean(georeferenced_coords, axis=0)
centroid_non_georeferenced = np.mean(non_georeferenced_coords, axis=0)

# Center the coordinates by subtracting centroids
centered_georeferenced_coords = georeferenced_coords - centroid_georeferenced
centered_non_georeferenced_coords = non_georeferenced_coords - centroid_non_georeferenced

# Compute the covariance matrix
covariance_matrix = np.dot(centered_georeferenced_coords.T, centered_non_georeferenced_coords)

# Perform Singular Value Decomposition (SVD)
U, S, VT = svd(covariance_matrix)

# Compute the rotation matrix
rotation_matrix = np.dot(U, VT)

# Compute the scale factor
scale_factor = np.linalg.det(rotation_matrix) ** (1 / 3)

# Compute the translation vector
translation_vector = centroid_non_georeferenced - np.dot(scale_factor * rotation_matrix, centroid_georeferenced)

# Calculate rotation angles in radians
rx = np.arctan2(rotation_matrix[2, 1], rotation_matrix[2, 2])
ry = np.arctan2(-rotation_matrix[2, 0], np.sqrt(rotation_matrix[2, 1] ** 2 + rotation_matrix[2, 2] ** 2))
rz = np.arctan2(rotation_matrix[1, 0], rotation_matrix[0, 0])

# Display the parameters
print("Translation Parameters:")
print("Translation in X:", translation_vector[0])
print("Translation in Y:", translation_vector[1])
print("Translation in Z:", translation_vector[2])
print("\nRotation Parameters:")
print("Rotation in X (radians):", rx)
print("Rotation in Y (radians):", ry)
print("Rotation in Z (radians):", rz)
print("\nScale Parameter:")
print(scale_factor)

# Set NumPy print options to display coordinates without exponential notation
np.set_printoptions(suppress=True)

# Apply the transformation to the non-georeferenced coordinates
transformed_non_georeferenced_coords = (scale_factor * np.dot(rotation_matrix, centered_non_georeferenced_coords.T).T) + centroid_georeferenced

# Create a new DataFrame for the transformed coordinates and photo ID
transformed_data = pd.DataFrame({
    'photoID': merged_data['photoID'],
    'X_transformed': transformed_non_georeferenced_coords[:, 0],
    'Y_transformed': transformed_non_georeferenced_coords[:, 1],
    'Z_transformed': transformed_non_georeferenced_coords[:, 2]
})
pd.options.display.float_format = '{:.6f}'.format
# Display the transformed data
print("Transformed Data:")
print(transformed_data)

# Save the transformed data to a CSV file in the 'D:\' drive
transformed_data.to_csv('D:\\transformed_coordinates.csv', index=False)